(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[4],{3441:function(e,n,t){"use strict";t("4486")},4486:function(e,n,t){},"4f4a":function(e,n,t){"use strict";t.r(n);var r=t("7a23");function a(e,n,t,a,o,i){const u=Object(r["B"])("w02");return Object(r["u"])(),Object(r["e"])("div",null,[Object(r["h"])(u)])}const o=Object(r["I"])("data-v-84107d56");Object(r["x"])("data-v-84107d56");const i={class:"viewer"},u=Object(r["h"])("canvas",{id:"canvasView"},null,-1),c=Object(r["h"])("div",{id:"uiContainer"},[Object(r["h"])("div",{id:"ui"})],-1);Object(r["v"])();const l=o(((e,n,t,a,o,l)=>(Object(r["u"])(),Object(r["e"])("div",i,[u,c]))));t("cfc3"),t("ace4"),t("13d5");var s={name:"Landing",data(){return{vertexShaderSource:"#version 300 es\n\n      // an attribute is an input (in) to a vertex shader.\n      // It will receive data from a buffer\n      in vec2 a_position;\n      in vec2 a_texCoord;\n\n      // Used to pass in the resolution of the canvas\n      uniform vec2 u_resolution;\n      uniform float u_flipY;\n\n      // Used to pass the texture coordinates to the fragment shader\n      out vec2 v_texCoord;\n\n      // all shaders have a main function\n      void main() {\n\n        // convert the position from pixels to 0.0 to 1.0\n        vec2 zeroToOne = a_position / u_resolution;\n\n        // convert from 0->1 to 0->2\n        vec2 zeroToTwo = zeroToOne * 2.0;\n\n        // convert from 0->2 to -1->+1 (clipspace)\n        vec2 clipSpace = zeroToTwo - 1.0;\n\n        gl_Position = vec4(clipSpace * vec2(1, u_flipY), 0, 1);\n\n        // pass the texCoord to the fragment shader\n        // The GPU will interpolate this value between points.\n        v_texCoord = a_texCoord;\n      }\n      ",fragmentShaderSource:'#version 300 es\n\n      // fragment shaders don\'t have a default precision so we need\n      // to pick one. highp is a good default. It means "high precision"\n      precision highp float;\n\n      // our texture\n      uniform sampler2D u_image;\n\n      // the convolution kernal data\n      uniform float u_kernel[9];\n      uniform float u_kernelWeight;\n\n      // the texCoords passed in from the vertex shader.\n      in vec2 v_texCoord;\n\n      // we need to declare an output for the fragment shader\n      out vec4 outColor;\n\n      void main() {\n        vec2 onePixel = vec2(1) / vec2(textureSize(u_image, 0));\n\n        vec4 colorSum =\n            texture(u_image, v_texCoord + onePixel * vec2(-1, -1)) * u_kernel[0] +\n            texture(u_image, v_texCoord + onePixel * vec2( 0, -1)) * u_kernel[1] +\n            texture(u_image, v_texCoord + onePixel * vec2( 1, -1)) * u_kernel[2] +\n            texture(u_image, v_texCoord + onePixel * vec2(-1,  0)) * u_kernel[3] +\n            texture(u_image, v_texCoord + onePixel * vec2( 0,  0)) * u_kernel[4] +\n            texture(u_image, v_texCoord + onePixel * vec2( 1,  0)) * u_kernel[5] +\n            texture(u_image, v_texCoord + onePixel * vec2(-1,  1)) * u_kernel[6] +\n            texture(u_image, v_texCoord + onePixel * vec2( 0,  1)) * u_kernel[7] +\n            texture(u_image, v_texCoord + onePixel * vec2( 1,  1)) * u_kernel[8] ;\n        outColor = vec4((colorSum / u_kernelWeight).rgb, 1);\n      }\n      '}},methods:{init:function(){var e=new Image;e.crossOrigin="anonymous",e.src="https://webgl2fundamentals.org/webgl/resources/leaves.jpg";var n=this;e.onload=function(){n.render(e)}},render:function(e){var n=document.querySelector("#canvasView"),t=n.getContext("webgl2");if(t){var r=webglUtils.createProgramFromSources(t,[this.vertexShaderSource,this.fragmentShaderSource]),a=t.getAttribLocation(r,"a_position"),o=t.getAttribLocation(r,"a_texCoord"),i=t.getUniformLocation(r,"u_resolution"),u=t.getUniformLocation(r,"u_image"),c=t.getUniformLocation(r,"u_kernel[0]"),l=t.getUniformLocation(r,"u_kernelWeight"),s=t.getUniformLocation(r,"u_flipY"),d=t.createVertexArray();t.bindVertexArray(d);var v=t.createBuffer();t.enableVertexAttribArray(a),t.bindBuffer(t.ARRAY_BUFFER,v);var m=2,f=t.FLOAT,_=!1,h=0,g=0;t.vertexAttribPointer(a,m,f,_,h,g);var x=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,x),t.bufferData(t.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),t.STATIC_DRAW),t.enableVertexAttribArray(o);m=2,f=t.FLOAT,_=!1,h=0,g=0;t.vertexAttribPointer(o,m,f,_,h,g);var T=G(t),E=0,p=t.RGBA,b=t.RGBA,R=t.UNSIGNED_BYTE;t.texImage2D(t.TEXTURE_2D,E,p,b,R,e);for(var A=[],C=[],U=0;U<2;++U){var B=G(t);A.push(B);E=0,p=t.RGBA;var D=0,F=(b=t.RGBA,R=t.UNSIGNED_BYTE,null);t.texImage2D(t.TEXTURE_2D,E,p,e.width,e.height,D,b,R,F);var w=t.createFramebuffer();C.push(w),t.bindFramebuffer(t.FRAMEBUFFER,w);var P=t.COLOR_ATTACHMENT0;t.framebufferTexture2D(t.FRAMEBUFFER,P,t.TEXTURE_2D,B,E)}t.bindBuffer(t.ARRAY_BUFFER,v),this.setRectangle(t,0,0,e.width,e.height);var O={normal:[0,0,0,0,1,0,0,0,0],gaussianBlur:[.045,.122,.045,.122,.332,.122,.045,.122,.045],gaussianBlur2:[1,2,1,2,4,2,1,2,1],gaussianBlur3:[0,1,0,1,1,1,0,1,0],unsharpen:[-1,-1,-1,-1,9,-1,-1,-1,-1],sharpness:[0,-1,0,-1,5,-1,0,-1,0],sharpen:[-1,-1,-1,-1,16,-1,-1,-1,-1],edgeDetect:[-.125,-.125,-.125,-.125,1,-.125,-.125,-.125,-.125],edgeDetect2:[-1,-1,-1,-1,8,-1,-1,-1,-1],edgeDetect3:[-5,0,0,0,0,0,0,0,5],edgeDetect4:[-1,-1,-1,0,0,0,1,1,1],edgeDetect5:[-1,-1,-1,2,2,2,-1,-1,-1],edgeDetect6:[-5,-5,-5,-5,39,-5,-5,-5,-5],sobelHorizontal:[1,2,1,0,0,0,-1,-2,-1],sobelVertical:[1,0,-1,2,0,-2,1,0,-1],previtHorizontal:[1,1,1,0,0,0,-1,-1,-1],previtVertical:[1,0,-1,1,0,-1,1,0,-1],boxBlur:[.111,.111,.111,.111,.111,.111,.111,.111,.111],triangleBlur:[.0625,.125,.0625,.125,.25,.125,.0625,.125,.0625],emboss:[-2,-1,0,-1,1,1,0,1,2]},S=[{name:"normal",on:!0},{name:"gaussianBlur"},{name:"gaussianBlur2",on:!0},{name:"gaussianBlur3",on:!0},{name:"unsharpen"},{name:"sharpness"},{name:"sharpen"},{name:"edgeDetect"},{name:"edgeDetect2"},{name:"edgeDetect3"},{name:"edgeDetect4"},{name:"edgeDetect5"},{name:"edgeDetect6"},{name:"sobelHorizontal"},{name:"sobelVertical"},{name:"previtHorizontal"},{name:"previtVertical"},{name:"boxBlur"},{name:"triangleBlur"},{name:"emboss"}],k=document.querySelector("#ui"),I=document.createElement("table"),L=document.createElement("tbody");for(U=0;U<S.length;++U){var X=S[U],j=document.createElement("tr"),y=document.createElement("td"),z=document.createElement("input");z.value=X.name,z.type="checkbox",X.on&&(z.checked="true"),z.onchange=N,y.appendChild(z),y.appendChild(document.createTextNode(X.name)),j.appendChild(y),L.appendChild(j)}I.appendChild(L),k.appendChild(I),N()}function G(e){var n=e.createTexture();return e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),n}function V(e){var n=e.reduce((function(e,n){return e+n}));return n<=0?1:n}function N(){webglUtils.resizeCanvasToDisplaySize(t.canvas),t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),t.useProgram(r),t.bindVertexArray(d),t.activeTexture(t.TEXTURE0+0),t.bindTexture(t.TEXTURE_2D,T),t.uniform1i(u,0),t.uniform1f(s,1);for(var n=0,a=0;a<L.rows.length;++a){var o=L.rows[a].firstChild.firstChild;o.checked&&(Y(C[n%2],e.width,e.height),M(o.value),t.bindTexture(t.TEXTURE_2D,A[n%2]),++n)}t.uniform1f(s,-1),Y(null,t.canvas.width,t.canvas.height),t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),M("normal")}function Y(e,n,r){t.bindFramebuffer(t.FRAMEBUFFER,e),t.uniform2f(i,n,r),t.viewport(0,0,n,r)}function M(e){t.uniform1fv(c,O[e]),t.uniform1f(l,V(O[e]));var n=t.TRIANGLES,r=0,a=6;t.drawArrays(n,r,a)}},setRectangle:function(e,n,t,r,a){var o=n,i=n+r,u=t,c=t+a;e.bufferData(e.ARRAY_BUFFER,new Float32Array([o,u,i,u,o,c,o,c,i,u,i,c]),e.STATIC_DRAW)}},mounted(){this.init()}};t("3441");s.render=l,s.__scopeId="data-v-84107d56";var d=s,v=Object(r["i"])({components:{W02:d},name:"PageIndex"});v.render=a;n["default"]=v}}]);